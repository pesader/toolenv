#!/bin/bash

config_dir=$HOME/.config/toolenv

# help(){
# }

__inside_toolbx(){
    if [[ -f /run/.containerenv && -f /run/.toolboxenv ]]; then
        return 0 # true
    else
        return 1 # false
    fi
}

__get_container_name(){
    if __inside_toolbx; then
        container_name=$(echo $(. /var/run/.containerenv; echo ${name}))
    fi
    echo $container_name
}

__get_default_shell(){
    default_shell=$(basename $(echo $SHELL))
    echo $default_shell
}

__get_environment_path(){
    container_name=${1:-$(__get_container_name)}
    shell=${2:-$(__get_default_shell)}

    env_path="$config_dir/environments/$container_name/env.$shell"
    echo $env_path
}


__get_environment_dir(){
    container_name=${1:-$(__get_container_name)}
    shell=${2:-$(__get_default_shell)}

    env_path="$config_dir/environments/$container_name/"
    echo $env_path
}

__get_template_path(){
    container_name=${1:-$(__get_container_name)}
    shell=${2:-$default_shell}

    env_path="$config_dir/templates/$container_name/env.$shell"
    echo $env_path
}

init(){
    shell=${1:-$(__get_default_shell)}
    if __inside_toolbx; then
        container_name=$(__get_container_name)
        env_path=$(__get_environment_path $container_name $shell)
        if [[ -f $env_path ]]; then
            echo "source $env_path"
        fi
    fi
}

source(){
    container_name=${1:-$(__get_container_name)}
    shell=${2:-$(__get_default_shell)}
    env_path=$(__get_environment_path $container_name $shell)
    if [[ -f $env_path ]]; then
        source $env_path
    fi
}

create(){
    container_name=${1:-$(__get_container_name)}
    shell=${2:-$(__get_default_shell)}
    env_path=$(__get_environment_path $container_name $shell)
    env_dir=$(__get_environment_dir $container_name $shell)
    is_template=false
    from_template=""

    while (( $# >= 1 )); do 
        case $1 in
        --template) is_template=true;;
        --uglify) uglify=true;;
        *) break;
        esac;
        shift
    done

    if [[ -z "$container_name" ]]; then
        echo "Please specify a container for the environment"
        exit 1
    fi

    if ! [[ -d env_vir ]]; then
        mkdir -p $env_dir
    fi

    if ! [[ -f $env_path ]]; then
        touch $env_path
    else
        echo "Error: $shell enviroment for container $container_name already created"
        exit 1
    fi
}

# edit(){
# }


if [[ $1 =~ ^(help|init|create|edit|source|init)$ ]]; then
    "$@"
else
    echo "Invalid subcommand $1" >&2
    exit 1
fi

